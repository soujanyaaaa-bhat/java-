package javaapplication1;
import java.sql.*;
import java.util.*;
public class JavaApplication1 {
public static void main(String[] args) {
DatabaseManager dbManager = new DatabaseManager();
Scanner scanner = new Scanner(System.in);
while (true) {
System.out.println("\n1. Add Attendee\n2. Edit Attendee\n3. Delete Attendee\n4. Search
Attendee\n5. Generate Statistics\n6. Exit");
System.out.print("Choose an option: ");
try {
int choice = scanner.nextInt();
scanner.nextLine(); // Consume newline
switch (choice) {
case 1:
System.out.print("Enter Full Name: ");
String fullName = scanner.nextLine();
System.out.print("Enter Email: ");
String email = scanner.nextLine();
System.out.print("Enter Contact Number: ");
String contactNumber = scanner.nextLine();
System.out.print("Enter Country: ");
String country = scanner.nextLine();
Attendee newAttendee = new Attendee(0, fullName, email, contactNumber,

country);

dbManager.addAttendee(newAttendee);
System.out.println("Attendee added with ID: " + newAttendee.getId());
break;
case 2:
System.out.print("Enter Attendee ID to edit: ");
int editId = scanner.nextInt();
scanner.nextLine();
System.out.print("Enter New Full Name: ");
String newFullName = scanner.nextLine();
System.out.print("Enter New Email: ");
String newEmail = scanner.nextLine();

System.out.print("Enter New Contact Number: ");
String newContactNumber = scanner.nextLine();
System.out.print("Enter New Country: ");
String newCountry = scanner.nextLine();
Attendee updatedAttendee = new Attendee(editId, newFullName, newEmail,

newContactNumber, newCountry);

dbManager.editAttendee(updatedAttendee);
System.out.println("Attendee updated successfully.");
break;
case 3:
System.out.print("Enter Attendee ID to delete: ");
int deleteId = scanner.nextInt();
dbManager.deleteAttendee(deleteId);
System.out.println("Attendee deleted successfully.");
break;
case 4:
System.out.print("Enter search term (ID, Name, or Country): ");
String searchTerm = scanner.nextLine();
List<Attendee> searchResults = dbManager.searchAttendees(searchTerm);
if (searchResults.isEmpty()) {
System.out.println("No attendees found.");
} else {
for (Attendee attendee : searchResults) {
System.out.println(attendee.getId() + ": " + attendee.getFullName() + ", " +

attendee.getEmail() + ", " + attendee.getCountry());

}
}
break;
case 5:
dbManager.generateAttendeeStatistics();
break;
case 6:
System.out.println("Exiting...");
return;
default:
System.out.println("Invalid choice. Try again.");
}
} catch (InputMismatchException e) {

System.out.println("Invalid input. Please enter a number.");
scanner.nextLine(); // Clear the invalid input
} catch (SQLException e) {
System.out.println("Database error: " + e.getMessage());
}
}
}
}
class Attendee {
private int id;
private String fullName;
private String email;
private String contactNumber;
private String country;
public Attendee(int id, String fullName, String email, String contactNumber, String country) {
this.id = id;
this.fullName = fullName;
this.email = email;
this.contactNumber = contactNumber;
this.country = country;
}
public int getId() { return id; }
public void setId(int id) { this.id = id; }
public String getFullName() { return fullName; }
public void setFullName(String fullName) { this.fullName = fullName; }
public String getEmail() { return email; }
public void setEmail(String email) { this.email = email; }
public String getContactNumber() { return contactNumber; }
public void setContactNumber(String contactNumber) { this.contactNumber = contactNumber;
}
public String getCountry() { return country; }
public void setCountry(String country) { this.country = country; }
}
class DatabaseManager {
private static final String URL = "jdbc:mysql://localhost:3306/conference_db";
private static final String USER = "root";
private static final String PASSWORD = "ribstyles@67";
public void addAttendee(Attendee attendee) throws SQLException {

String query = "INSERT INTO attendees (full_name, email, contact_number, country)
VALUES (?, ?, ?, ?)";
try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
PreparedStatement pstmt = conn.prepareStatement(query,
Statement.RETURN_GENERATED_KEYS)) {
pstmt.setString(1, attendee.getFullName());
pstmt.setString(2, attendee.getEmail());
pstmt.setString(3, attendee.getContactNumber());
pstmt.setString(4, attendee.getCountry());
pstmt.executeUpdate();
try (ResultSet rs = pstmt.getGeneratedKeys()) {
if (rs.next()) {
attendee.setId(rs.getInt(1));
}
}
}
}
public void editAttendee(Attendee attendee) throws SQLException {
String query = "UPDATE attendees SET full_name = ?, email = ?, contact_number = ?,
country = ? WHERE id = ?";
try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
PreparedStatement pstmt = conn.prepareStatement(query)) {
pstmt.setString(1, attendee.getFullName());
pstmt.setString(2, attendee.getEmail());
pstmt.setString(3, attendee.getContactNumber());
pstmt.setString(4, attendee.getCountry());
pstmt.setInt(5, attendee.getId());
pstmt.executeUpdate();
}
}
public void deleteAttendee(int id) throws SQLException {
String query = "DELETE FROM attendees WHERE id = ?";
try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
PreparedStatement pstmt = conn.prepareStatement(query)) {
pstmt.setInt(1, id);
pstmt.executeUpdate();
}
}
public List<Attendee> searchAttendees(String searchTerm) throws SQLException {
List<Attendee> attendees = new ArrayList<>();

String query = "SELECT * FROM attendees WHERE full_name LIKE ? OR country LIKE
?";
try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
PreparedStatement pstmt = conn.prepareStatement(query)) {
pstmt.setString(1, "%" + searchTerm + "%");
pstmt.setString(2, "%" + searchTerm + "%");
try (ResultSet rs = pstmt.executeQuery()) {
while (rs.next()) {
attendees.add(new Attendee(
rs.getInt("id"),
rs.getString("full_name"),
rs.getString("email"),
rs.getString("contact_number"),
rs.getString("country")
));
}
}
}
return attendees;
}
public void generateAttendeeStatistics() throws SQLException {
String query = "{call GetAttendeeStatistics()}";
try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
CallableStatement cstmt = conn.prepareCall(query)) {
try (ResultSet rs = cstmt.executeQuery()) {
while (rs.next()) {
System.out.println("Country: " + rs.getString("country") +
", Attendee Count: " + rs.getInt("attendee_count"));
}
}
}
}
}
